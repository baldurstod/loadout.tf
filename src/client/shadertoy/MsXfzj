/*

	Tunnel5 a.k.a "IFSerno"
    for cooperation of polish demoscene musicians, called:


    "Power Packed Alliance".
    -----------------------------------

	https://www.youtube.com/watch?v=_lSReW7eRI4
    http://www.pouet.net/prod.php?which=70247



    also check my chrome extension for Shadertoy:
    https://chrome.google.com/webstore/detail/shadertoy-unofficial-plug/ohicbclhdmkhoabobgppffepcopomhgl?hl=pl

*/

#define getNormal getNormalHex

#define FAR 150.
#define INFINITY 1e32

#define mt iChannelTime[1]
#define FOV 130.0
#define FOG .06

#define TAU (2*PI)
#define PHI (1.618033988749895)

float vol = 0.;

vec3 fromRGB(int r, int g, int b) {
 	return vec3(float(r), float(g), float(b)) / 255.;
}

const vec3
    light = vec3(0., 0., 2.)
	;

vec3 lightColour = normalize(vec3(0.1, .0, .4));

vec3 opRep( vec3 p, vec3 c )
{
    return mod(p,c)-0.5*c;
}

// Repeat only a few times: from indices <start> to <stop> (similar to above, but more flexible)
float pModInterval1(inout float p, float size, float start, float stop) {
	float halfsize = size*0.5;
	float c = floor((p + halfsize)/size);
	p = mod(p+halfsize, size) - halfsize;
	if (c > stop) { //yes, this might not be the best thing numerically.
		p += size*(c - stop);
		c = stop;
	}
	if (c <start) {
		p += size*(c - start);
		c = start;
	}
	return c;
}

void pR(inout vec2 p, float a) {
	p = cos(a)*p + sin(a)*vec2(p.y, -p.x);
}

float opU2( float d1, float d2 ) {
    if (d1 < d2) return d1;
    return d2;
}

vec3 opU2( vec3 d1, vec3 d2 ) {
    if (d1.x < d2.x) return d1;
    return d2;
}

struct geometry {
    float dist;
    vec3 space;
    vec3 hit;
    vec3 sn;
    vec2 material;
    int iterations;
    float glow;
};

geometry geoU(geometry g1, geometry g2) {
    if (g1.dist < g2.dist) return g1;
    return g2;
}

geometry geoI(geometry g1, geometry g2) {
    if (g1.dist > g2.dist) return g1;
    return g2;
}

vec3 opS2( vec3 d1, vec3 d2 )
{
    if (-d2.x > d1.x) return -d2;
    return d1;
}

vec3 opI2( vec3 d1, vec3 d2 ) {
 	if (d1.x > d2.x) return d1;
    return d2;
}

float vmax(vec2 v) {
	return max(v.x, v.y);
}

float vmax(vec3 v) {
	return max(max(v.x, v.y), v.z);
}

float vmax(vec4 v) {
	return max(max(v.x, v.y), max(v.z, v.w));
}

// Sign function that doesn't return 0
float sgn(float x) {
	return (x<0.)?-1.:1.;
}

vec2 sgn(vec2 v) {
	return vec2((v.x<0.)?-1.:1., (v.y<0.)?-1.:1.);
}

// Repeat around the origin by a fixed angle.
// For easier use, num of repetitions is use to specify the angle.
float pModPolar(inout vec2 p, float repetitions) {
	float angle = 2.*PI/repetitions;
	float a = atan(p.y, p.x) + angle/2.;
	float r = length(p);
	float c = floor(a/angle);
	a = mod(a,angle) - angle/2.;
	p = vec2(cos(a), sin(a))*r;
	// For an odd number of repetitions, fix cell index of the cell in -x direction
	// (cell index would be e.g. -5 and 5 in the two halves of the cell):
	if (abs(c) >= (repetitions/2.)) c = abs(c);
	return c;
}

// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.
float pMirror (inout float p, float dist) {
	float s = sgn(p);
	p = abs(p)-dist;
	return s;
}

vec2 pMirrorOctant (inout vec2 p, vec2 dist) {
	vec2 s = sgn(p);
	pMirror(p.x, dist.x);
	pMirror(p.y, dist.y);
	if (p.y > p.x)
		p.xy = p.yx;
	return s;
}

float fBox(vec3 p, vec3 b) {
	vec3 d = abs(p) - b;
	return length(max(d, vec3(0))) + vmax(min(d, vec3(0)));
}

float fBox2Cheap(vec2 p, vec2 b) {
	return vmax(abs(p)-b);
}

float fCross(vec3 p, vec3 size) {
    float obj = fBox(p, size);
    obj = opU2(obj, fBox(p, size.zxy));
    obj = opU2(obj, fBox(p, size.yzx));
    return obj;
}

float fSphere(vec3 p, float r) {
	return length(p) - r;
}

geometry DE(vec3 p)
{
    float scale = 2.1;
	const float offset = 6.0;
    const int FRACTALITERATIONS = 5;
    vec3 modifier = vec3(1.43 , 2.01, 1.);
	vec3 orgp = p;

    for(int n = 0; n< FRACTALITERATIONS; n++)
	{

        p = abs(p);

		p.xy = (p.x - p.y < 0.0) ? p.yx : p.xy;
		p.xz = (p.x - p.z < 0.0) ? p.zx : p.xz;
		p.zy = (p.y - p.z < 0.0) ? p.yz : p.zy;

		p.x -= 12.9;
        p.z += -2.3;

        pR(p.xz, -.20645);

        if (orgp.y < 5.) p.y += orgp.x;
        if (p.z > 0.5 * scale - 1.) p.z -= scale - 3.;

        p.xyz = scale* p.xyz - offset*(scale-1.0) * modifier.xyz;
	}

 	geometry obj;
    obj.dist = length(p.xz) * (pow(scale, -float(FRACTALITERATIONS))) - 0.03;
	obj.space = p;
    return obj;
}


geometry map(vec3 p) {

    vec3 bp = p;

    p.z = mod(p.z, 30.) - 65.;

    pMirrorOctant(p.zy, vec2(110., 15.));
	pMirrorOctant(p.xy, vec2(20.,  12.));

    vec3 floor_p = p;

    pR(p.xz, -1.5);

    p.x += 1.5;

    float pM = pModPolar(p.zx, 4.);

    pMirrorOctant(p.xy, vec2(12.1, 8.)) ;
    pMirrorOctant(p.xz, vec2(12.5, 64.));

    p.x += 10.;
    p.yx += 3.;

    geometry obj;

    obj = DE(p);
    obj.material = vec2(1., 0.);

    return obj;
}

float t_min = 0.01;
float t_max = FAR;
const int MAX_ITERATIONS = 60;

geometry trace(vec3 o, vec3 d) {
    float omega = 1.2;
    float t = t_min;
    float candidate_error = INFINITY;
    float candidate_t = t_min;
    float previousRadius = 0.;
    float stepLength = 0.;
    float pixelRadius = 1./ 90.;

    geometry mp = map(o);
    mp.glow = 0.;

    float functionSign = mp.dist < 0. ? -1. : +1.;
    float minDist = 140.;

    for (int i = 0; i < MAX_ITERATIONS; ++i) {

        mp = map(d * t + o);
		mp.iterations = i;

        minDist = min(minDist, mp.dist);
        if (i < 110) mp.glow = pow( 1. / minDist, 1.12);

        float signedRadius = functionSign * mp.dist;
        float radius = abs(signedRadius);
        bool sorFail = omega > 1. &&
        (radius + previousRadius) < stepLength;
        if (sorFail) {
            stepLength -= omega * stepLength;
            omega = 1.;
        } else {
        stepLength = signedRadius * omega;
        }
        previousRadius = radius;
        float error = radius / t;
        if (!sorFail && error < candidate_error) {
            candidate_t = t;
            candidate_error = error;
        }
        if (!sorFail && error < pixelRadius || t > t_max) break;
        t += stepLength;
   	}

    mp.dist = candidate_t;

    if (
        (t > t_max || candidate_error > pixelRadius)
    	) mp.dist = INFINITY;

    return mp;
}


float softShadow(vec3 ro, vec3 lp, float k) {
    const int maxIterationsShad = 8;
    vec3 rd = (lp - ro); // Unnormalized direction ray.

    float shade = 4.;
    float dist = 4.5;
    float end = max(length(rd), 0.01);
    float stepDist = end / float(maxIterationsShad);

    rd /= end;
    for (int i = 0; i < maxIterationsShad; i++) {
        float h = map(ro + rd * dist).dist;
        shade = min(shade, k*h/dist);
        dist += min(h, stepDist * 2.);
        if (h < 0.001 || dist > end) break;
    }
    return min(max(shade, 0.0), 1.0);
}

vec3 getNormalHex(vec3 pos)
{
	float d=map(pos).dist;
	return normalize(
        vec3(
            map(
                pos+vec3(EPSILON,0,0)).dist-d,
                map(pos+vec3(0,EPSILON,0)).dist-d,
                map(pos+vec3(0,0,EPSILON)).dist-d
        	)
    	);
}

float getAO(vec3 hitp, vec3 normal, float dist)
{
    vec3 spos = hitp + normal * dist;
    float sdist = map(spos).dist;
    return clamp(sdist / dist, 0.0, 1.0);
}

vec3 getObjectColor(vec3 p, vec3 n, geometry obj) {
    vec3 col = vec3(0.0);

    if (obj.material.x == 1.0) {
        col += 1.;
    }

    return col ;
}

vec3 doColor( in vec3 sp, in vec3 rd, in vec3 sn, in vec3 lp, geometry obj) {
	vec3 sceneCol = vec3(0.0);
    lp = sp + lp;
    vec3 ld = lp - sp;
    float lDist = max(length(ld / 2.), 0.001);
    ld /= lDist;
    float diff = max(dot(sn, ld), 1.);
    float spec = pow(max(dot(reflect(-ld, sn), -rd), .0), 1.);
    vec3 objCol = getObjectColor(sp, sn, obj);
    sceneCol += (objCol * (diff + .15) * spec * .4);

    return sceneCol;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {

    vec2 ouv = fragCoord.xy / iResolution.xy;
    vec2 uv = ouv - .5;

    //vol = length(texture(iChannel0, vec2(.42, .25)).rgb);
	vol = 0.5;

    uv *= tan(radians (FOV) / 2.0);

    if (abs(uv.y) > .75) {
    	fragColor *= 0.;
        return;
    }

    float t2 = iTime - 35.;
    float
        sk = sin(-t2 * .04) * 16.0,
        ck = cos(-t2 * .107) * 12.0 - sk,

        mat = 0.;


    //light = vec3(0., 0., 2.);

    float speed = min(7., iTime / 20.);


    vec3
        vuv = vec3(cos(iTime / 17. * speed), sin(iTime / 4.), 0.), // up
    	ro = vec3(-1., 0.5, iTime * speed);

    vec3
        vrp =  vec3(0., 0., 10. + iTime * speed);


    vrp.x += sin(ro.z / 12.) * 1.;
    vrp.y += sin(ro.z / 10.) * 10.;

    vec3
    	vpn = normalize(vrp - ro),
    	u = normalize(cross(vuv, vpn)),
    	v = cross(vpn, u),
    	vcv = (ro + vpn),
    	scrCoord = (vcv + uv.x * u * iResolution.x/iResolution.y + uv.y * v),
    	rd = normalize(scrCoord - ro);


    vec3 sceneColor = vec3(0.);

    vec3 lp = light + ro;
	//lightDir = lp;

    geometry tr = trace(ro, rd);

    float fog = smoothstep(FAR * FOG, 0., tr.dist / 6.);
    tr.hit = ro + rd * tr.dist;

    tr.sn = getNormal(tr.hit);

    float sh = softShadow(tr.hit, light, 15.);

    float
        ao = getAO(tr.hit, tr.sn, 9.);

    if (tr.dist < FAR) {

        vec3 col = (doColor(tr.hit, rd, tr.sn, light, tr) * 1.) * 1.;

        sceneColor = col;
        sceneColor *= ao;
        sceneColor *= sh;

        //sceneColor += texture(iChannel0, vec2(120. - length(tr.hit.xy) / 8., 0.25)).rrr / tr.dist / 4.;
    }

    sceneColor = mix(sceneColor, lightColour, 0.15);
    sceneColor += pow(sin(float(tr.iterations) / 70.), 2.9) * 5.55 * vec3(1., 0.5, 0.);
    sceneColor += (pow((sin(PI * fract(iTime * 0.1 +  (sin(tr.hit.y + iTime * 0.1) - sin(tr.hit.x)) / 10. + iTime / 3.)) + 1.), 5.) / 10.) / 20.;

    fragColor = vec4(clamp(sceneColor * (1. - length(uv) / 2.5), 0.0, 1.0), 1.0);
    fragColor *= 1. + pow(vol * 1.,  13.2) / 10.;
    fragColor = pow(fragColor, vec4(1.4));



}
